/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v0/commonapi/Car_ControlSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createCar_ControlSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< Car_ControlSomeIPProxy>(_address, _connection);
}

void initializeCar_ControlSomeIPProxy() {
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.Car_Control:v0_1",
        &createCar_ControlSomeIPProxy);
}

INITIALIZER(registerCar_ControlSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeCar_ControlSomeIPProxy);
}

Car_ControlSomeIPProxy::Car_ControlSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          indicator_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x7531), CommonAPI::SomeIP::event_id_t(0x8001), CommonAPI::SomeIP::method_id_t(0xbb9), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
          gear_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x7531), CommonAPI::SomeIP::event_id_t(0x8002), CommonAPI::SomeIP::method_id_t(0xbba), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr))
{
}

Car_ControlSomeIPProxy::~Car_ControlSomeIPProxy() {
    completed_.set_value();
}

Car_ControlSomeIPProxy::IndicatorAttribute& Car_ControlSomeIPProxy::getIndicatorAttribute() {
    return indicator_;
}
Car_ControlSomeIPProxy::GearAttribute& Car_ControlSomeIPProxy::getGearAttribute() {
    return gear_;
}


void Car_ControlSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

std::future<void> Car_ControlSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace commonapi
} // namespace v0
