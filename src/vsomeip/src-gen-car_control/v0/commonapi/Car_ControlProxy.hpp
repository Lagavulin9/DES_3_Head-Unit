/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_Car__Control_PROXY_HPP_
#define V0_COMMONAPI_Car__Control_PROXY_HPP_

#include <v0/commonapi/Car_ControlProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

template <typename ... _AttributeExtensions>
class Car_ControlProxy
    : virtual public Car_Control,
      virtual public Car_ControlProxyBase,
      virtual public _AttributeExtensions... {
public:
    Car_ControlProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~Car_ControlProxy();

    typedef Car_Control InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Returns the wrapper class that provides access to the attribute indicator.
     */
    virtual IndicatorAttribute& getIndicatorAttribute() {
        return delegate_->getIndicatorAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute gear.
     */
    virtual GearAttribute& getGearAttribute() {
        return delegate_->getGearAttribute();
    }



 private:
    std::shared_ptr< Car_ControlProxyBase> delegate_;
};

typedef Car_ControlProxy<> Car_ControlProxyDefault;

namespace Car_ControlExtensions {
    template <template <typename > class _ExtensionType>
    class IndicatorAttributeExtension {
     public:
        typedef _ExtensionType< Car_ControlProxyBase::IndicatorAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< Car_ControlProxyBase::IndicatorAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        IndicatorAttributeExtension(Car_ControlProxyBase& proxy): attributeExtension_(proxy.getIndicatorAttribute()) {
        }
    
        inline extension_type& getIndicatorAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class GearAttributeExtension {
     public:
        typedef _ExtensionType< Car_ControlProxyBase::GearAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< Car_ControlProxyBase::GearAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        GearAttributeExtension(Car_ControlProxyBase& proxy): attributeExtension_(proxy.getGearAttribute()) {
        }
    
        inline extension_type& getGearAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace Car_ControlExtensions

//
// Car_ControlProxy Implementation
//
template <typename ... _AttributeExtensions>
Car_ControlProxy<_AttributeExtensions...>::Car_ControlProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< Car_ControlProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< Car_ControlProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
Car_ControlProxy<_AttributeExtensions...>::~Car_ControlProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &Car_ControlProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool Car_ControlProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool Car_ControlProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& Car_ControlProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& Car_ControlProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> Car_ControlProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace commonapi
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v0::commonapi::Car_ControlProxy,
    _AttributeExtension> {
    typedef typename ::v0::commonapi::Car_ControlProxy<
            ::v0::commonapi::Car_ControlExtensions::IndicatorAttributeExtension<_AttributeExtension>, 
            ::v0::commonapi::Car_ControlExtensions::GearAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_Car__Control_PROXY_HPP_
