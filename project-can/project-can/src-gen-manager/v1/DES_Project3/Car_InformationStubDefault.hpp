/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_DES_PROJECT3_Car__Information_STUB_DEFAULT_HPP_
#define V1_DES_PROJECT3_Car__Information_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/DES_Project3/Car_InformationStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace DES_Project3 {

/**
 * Provides a default implementation for Car_InformationStubRemoteEvent and
 * Car_InformationStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT Car_InformationStubDefault
    : public virtual Car_InformationStub {
public:
    COMMONAPI_EXPORT Car_InformationStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(Car_Information::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT Car_InformationStubRemoteEvent* initStubAdapter(const std::shared_ptr< Car_InformationStubAdapter> &_adapter) {
        CommonAPI::Stub<Car_InformationStubAdapter, Car_InformationStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual const uint8_t &getBatteryAttribute() {
        return batteryAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getBatteryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getBatteryAttribute();
    }
    COMMONAPI_EXPORT virtual void setBatteryAttribute(uint8_t _value) {
        const bool valueChanged = trySetBatteryAttribute(std::move(_value));
        if (valueChanged) {
            fireBatteryAttributeChanged(batteryAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setBatteryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
        (void)_client;
        setBatteryAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const float &getVoltageAttribute() {
        return voltageAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const float &getVoltageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getVoltageAttribute();
    }
    COMMONAPI_EXPORT virtual void setVoltageAttribute(float _value) {
        const bool valueChanged = trySetVoltageAttribute(std::move(_value));
        if (valueChanged) {
            fireVoltageAttributeChanged(voltageAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setVoltageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, float _value) {
        (void)_client;
        setVoltageAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const float &getCurrentAttribute() {
        return currentAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const float &getCurrentAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getCurrentAttribute();
    }
    COMMONAPI_EXPORT virtual void setCurrentAttribute(float _value) {
        const bool valueChanged = trySetCurrentAttribute(std::move(_value));
        if (valueChanged) {
            fireCurrentAttributeChanged(currentAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setCurrentAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, float _value) {
        (void)_client;
        setCurrentAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const uint8_t &getPowerConsumptionAttribute() {
        return powerConsumptionAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getPowerConsumptionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getPowerConsumptionAttribute();
    }
    COMMONAPI_EXPORT virtual void setPowerConsumptionAttribute(uint8_t _value) {
        const bool valueChanged = trySetPowerConsumptionAttribute(std::move(_value));
        if (valueChanged) {
            firePowerConsumptionAttributeChanged(powerConsumptionAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setPowerConsumptionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
        (void)_client;
        setPowerConsumptionAttribute(_value);
    }


protected:
    COMMONAPI_EXPORT virtual bool trySetBatteryAttribute(uint8_t _value) {
        if (!validateBatteryAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<Car_InformationStubAdapter> stubAdapter = CommonAPI::Stub<Car_InformationStubAdapter, Car_InformationStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockBatteryAttribute(true);
            valueChanged = (batteryAttributeValue_ != _value);
            batteryAttributeValue_ = std::move(_value);
            stubAdapter->lockBatteryAttribute(false);
        } else {
            valueChanged = (batteryAttributeValue_ != _value);
            batteryAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateBatteryAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteBatteryAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetVoltageAttribute(float _value) {
        if (!validateVoltageAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<Car_InformationStubAdapter> stubAdapter = CommonAPI::Stub<Car_InformationStubAdapter, Car_InformationStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockVoltageAttribute(true);
            valueChanged = (voltageAttributeValue_ != _value);
            voltageAttributeValue_ = std::move(_value);
            stubAdapter->lockVoltageAttribute(false);
        } else {
            valueChanged = (voltageAttributeValue_ != _value);
            voltageAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateVoltageAttributeRequestedValue(const float &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteVoltageAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetCurrentAttribute(float _value) {
        if (!validateCurrentAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<Car_InformationStubAdapter> stubAdapter = CommonAPI::Stub<Car_InformationStubAdapter, Car_InformationStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockCurrentAttribute(true);
            valueChanged = (currentAttributeValue_ != _value);
            currentAttributeValue_ = std::move(_value);
            stubAdapter->lockCurrentAttribute(false);
        } else {
            valueChanged = (currentAttributeValue_ != _value);
            currentAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateCurrentAttributeRequestedValue(const float &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteCurrentAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetPowerConsumptionAttribute(uint8_t _value) {
        if (!validatePowerConsumptionAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<Car_InformationStubAdapter> stubAdapter = CommonAPI::Stub<Car_InformationStubAdapter, Car_InformationStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockPowerConsumptionAttribute(true);
            valueChanged = (powerConsumptionAttributeValue_ != _value);
            powerConsumptionAttributeValue_ = std::move(_value);
            stubAdapter->lockPowerConsumptionAttribute(false);
        } else {
            valueChanged = (powerConsumptionAttributeValue_ != _value);
            powerConsumptionAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validatePowerConsumptionAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemotePowerConsumptionAttributeChanged() {
        // No operation in default
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual Car_InformationStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(Car_InformationStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        COMMONAPI_EXPORT virtual void onRemoteBatteryAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteBatteryAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetBatteryAttribute(uint8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetBatteryAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetBatteryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
            (void)_client;
            return onRemoteSetBatteryAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteVoltageAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteVoltageAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetVoltageAttribute(float _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetVoltageAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetVoltageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, float _value) {
            (void)_client;
            return onRemoteSetVoltageAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteCurrentAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteCurrentAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetCurrentAttribute(float _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetCurrentAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetCurrentAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, float _value) {
            (void)_client;
            return onRemoteSetCurrentAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemotePowerConsumptionAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemotePowerConsumptionAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetPowerConsumptionAttribute(uint8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetPowerConsumptionAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetPowerConsumptionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
            (void)_client;
            return onRemoteSetPowerConsumptionAttribute(_value);
        }

    private:
        Car_InformationStubDefault *defaultStub_;
    };
protected:
    Car_InformationStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    uint8_t batteryAttributeValue_ {};
    float voltageAttributeValue_ {};
    float currentAttributeValue_ {};
    uint8_t powerConsumptionAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace DES_Project3
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_DES_PROJECT3_Car__Information_STUB_DEFAULT
