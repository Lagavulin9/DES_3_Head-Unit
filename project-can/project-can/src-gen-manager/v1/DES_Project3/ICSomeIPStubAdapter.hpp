/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_DES_PROJECT3_IC_SOMEIP_STUB_ADAPTER_HPP_
#define V1_DES_PROJECT3_IC_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/DES_Project3/ICStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace DES_Project3 {

template <typename _Stub = ::v1::DES_Project3::ICStub, typename... _Stubs>
class ICSomeIPStubAdapterInternal
    : public virtual ICStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< ICSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> ICSomeIPStubAdapterHelper;

    ~ICSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        ICSomeIPStubAdapterHelper::deinit();
    }

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::DES_Project3::ICStub,
        CommonAPI::Version
    > getICInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::DES_Project3::ICStub,
        std::tuple< uint32_t>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > setRpmStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::DES_Project3::ICStub,
        std::tuple< uint32_t>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > setSpeedStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::DES_Project3::ICStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > setGearStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::DES_Project3::ICStub,
        std::tuple< float>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::EmptyDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > setCurrentStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::DES_Project3::ICStub,
        std::tuple< uint8_t>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > setPowerConsumptionStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::DES_Project3::ICStub,
        std::tuple< float>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::EmptyDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > setVoltageStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::DES_Project3::ICStub,
        std::tuple< uint8_t>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > setBatteryLevelStubDispatcher;
    
    ICSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        ICSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< ICStub>(_stub)),
        getICInterfaceVersionStubDispatcher(&ICStub::lockInterfaceVersionAttribute, &ICStub::getInterfaceVersion, false, true),
        setRpmStubDispatcher(
            &ICStub::setRpm,
            false,
            _stub->hasElement(0),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        setSpeedStubDispatcher(
            &ICStub::setSpeed,
            false,
            _stub->hasElement(1),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        setGearStubDispatcher(
            &ICStub::setGear,
            false,
            _stub->hasElement(2),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        setCurrentStubDispatcher(
            &ICStub::setCurrent,
            false,
            _stub->hasElement(3),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        setPowerConsumptionStubDispatcher(
            &ICStub::setPowerConsumption,
            false,
            _stub->hasElement(4),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        setVoltageStubDispatcher(
            &ICStub::setVoltage,
            false,
            _stub->hasElement(5),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        setBatteryLevelStubDispatcher(
            &ICStub::setBatteryLevel,
            false,
            _stub->hasElement(6),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
    {
        ICSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xc8) }, &setRpmStubDispatcher );
        ICSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xc9) }, &setSpeedStubDispatcher );
        ICSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xca) }, &setGearStubDispatcher );
        ICSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xcb) }, &setCurrentStubDispatcher );
        ICSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xcc) }, &setPowerConsumptionStubDispatcher );
        ICSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xcd) }, &setVoltageStubDispatcher );
        ICSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xce) }, &setBatteryLevelStubDispatcher );
        // Provided events/fields
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};


template <typename _Stub, typename... _Stubs>
void ICSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void ICSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v1::DES_Project3::ICStub, typename... _Stubs>
class ICSomeIPStubAdapter
    : public ICSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    ICSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          ICSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace DES_Project3
} // namespace v1

#endif // V1_DES_PROJECT3_IC_SOMEIP_STUB_ADAPTER_HPP_
