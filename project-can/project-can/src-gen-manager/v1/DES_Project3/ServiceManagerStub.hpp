/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_DES_PROJECT3_Service_Manager_STUB_HPP_
#define V1_DES_PROJECT3_Service_Manager_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/DES_Project3/ServiceManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#include <mutex>

#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace DES_Project3 {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ServiceManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ServiceManagerStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual ServiceManager {
 public:
    ///Notifies all remote listeners about a change of value of the attribute speed.
    virtual void fireSpeedAttributeChanged(const uint32_t &speed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute rpm.
    virtual void fireRpmAttributeChanged(const uint32_t &rpm) = 0;
    ///Notifies all remote listeners about a change of value of the attribute indicator.
    virtual void fireIndicatorAttributeChanged(const std::string &indicator) = 0;
    ///Notifies all remote listeners about a change of value of the attribute gear.
    virtual void fireGearAttributeChanged(const std::string &gear) = 0;
    ///Notifies all remote listeners about a change of value of the attribute battery.
    virtual void fireBatteryAttributeChanged(const uint8_t &battery) = 0;
    ///Notifies all remote listeners about a change of value of the attribute voltage.
    virtual void fireVoltageAttributeChanged(const float &voltage) = 0;
    ///Notifies all remote listeners about a change of value of the attribute current.
    virtual void fireCurrentAttributeChanged(const float &current) = 0;
    ///Notifies all remote listeners about a change of value of the attribute powerConsumption.
    virtual void firePowerConsumptionAttributeChanged(const uint8_t &powerConsumption) = 0;
    ///Notifies all remote listeners about a change of value of the attribute gearSelection.
    virtual void fireGearSelectionAttributeChanged(const std::string &gearSelection) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockSpeedAttribute(bool _lockAccess) {
        if (_lockAccess) {
            speedMutex_.lock();
        } else {
            speedMutex_.unlock();
        }
    }
    void lockRpmAttribute(bool _lockAccess) {
        if (_lockAccess) {
            rpmMutex_.lock();
        } else {
            rpmMutex_.unlock();
        }
    }
    void lockIndicatorAttribute(bool _lockAccess) {
        if (_lockAccess) {
            indicatorMutex_.lock();
        } else {
            indicatorMutex_.unlock();
        }
    }
    void lockGearAttribute(bool _lockAccess) {
        if (_lockAccess) {
            gearMutex_.lock();
        } else {
            gearMutex_.unlock();
        }
    }
    void lockBatteryAttribute(bool _lockAccess) {
        if (_lockAccess) {
            batteryMutex_.lock();
        } else {
            batteryMutex_.unlock();
        }
    }
    void lockVoltageAttribute(bool _lockAccess) {
        if (_lockAccess) {
            voltageMutex_.lock();
        } else {
            voltageMutex_.unlock();
        }
    }
    void lockCurrentAttribute(bool _lockAccess) {
        if (_lockAccess) {
            currentMutex_.lock();
        } else {
            currentMutex_.unlock();
        }
    }
    void lockPowerConsumptionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            powerConsumptionMutex_.lock();
        } else {
            powerConsumptionMutex_.unlock();
        }
    }
    void lockGearSelectionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            gearSelectionMutex_.lock();
        } else {
            gearSelectionMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::recursive_mutex speedMutex_;
    std::recursive_mutex rpmMutex_;
    std::recursive_mutex indicatorMutex_;
    std::recursive_mutex gearMutex_;
    std::recursive_mutex batteryMutex_;
    std::recursive_mutex voltageMutex_;
    std::recursive_mutex currentMutex_;
    std::recursive_mutex powerConsumptionMutex_;
    std::recursive_mutex gearSelectionMutex_;

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ServiceManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ServiceManagerStubRemoteEvent
{
public:
    virtual ~ServiceManagerStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute speed
    virtual bool onRemoteSetSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) = 0;
    /// Action callback for remote set requests on the attribute speed
    virtual void onRemoteSpeedAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute rpm
    virtual bool onRemoteSetRpmAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) = 0;
    /// Action callback for remote set requests on the attribute rpm
    virtual void onRemoteRpmAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute indicator
    virtual bool onRemoteSetIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) = 0;
    /// Action callback for remote set requests on the attribute indicator
    virtual void onRemoteIndicatorAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute gear
    virtual bool onRemoteSetGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) = 0;
    /// Action callback for remote set requests on the attribute gear
    virtual void onRemoteGearAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute battery
    virtual bool onRemoteSetBatteryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) = 0;
    /// Action callback for remote set requests on the attribute battery
    virtual void onRemoteBatteryAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute voltage
    virtual bool onRemoteSetVoltageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, float _value) = 0;
    /// Action callback for remote set requests on the attribute voltage
    virtual void onRemoteVoltageAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute current
    virtual bool onRemoteSetCurrentAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, float _value) = 0;
    /// Action callback for remote set requests on the attribute current
    virtual void onRemoteCurrentAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute powerConsumption
    virtual bool onRemoteSetPowerConsumptionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) = 0;
    /// Action callback for remote set requests on the attribute powerConsumption
    virtual void onRemotePowerConsumptionAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute gearSelection
    virtual bool onRemoteSetGearSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) = 0;
    /// Action callback for remote set requests on the attribute gearSelection
    virtual void onRemoteGearSelectionAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ServiceManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ServiceManagerStub
    : public virtual CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>
{
public:

    virtual ~ServiceManagerStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 9);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// Provides getter access to the attribute speed
    virtual const uint32_t &getSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireSpeedAttributeChanged(uint32_t _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireSpeedAttributeChanged(_value);
    }
    void lockSpeedAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockSpeedAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute rpm
    virtual const uint32_t &getRpmAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireRpmAttributeChanged(uint32_t _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireRpmAttributeChanged(_value);
    }
    void lockRpmAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockRpmAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute indicator
    virtual const std::string &getIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireIndicatorAttributeChanged(std::string _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireIndicatorAttributeChanged(_value);
    }
    void lockIndicatorAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockIndicatorAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute gear
    virtual const std::string &getGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireGearAttributeChanged(std::string _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireGearAttributeChanged(_value);
    }
    void lockGearAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockGearAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute battery
    virtual const uint8_t &getBatteryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireBatteryAttributeChanged(uint8_t _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireBatteryAttributeChanged(_value);
    }
    void lockBatteryAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockBatteryAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute voltage
    virtual const float &getVoltageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireVoltageAttributeChanged(float _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireVoltageAttributeChanged(_value);
    }
    void lockVoltageAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockVoltageAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute current
    virtual const float &getCurrentAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireCurrentAttributeChanged(float _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireCurrentAttributeChanged(_value);
    }
    void lockCurrentAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockCurrentAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute powerConsumption
    virtual const uint8_t &getPowerConsumptionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void firePowerConsumptionAttributeChanged(uint8_t _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->firePowerConsumptionAttributeChanged(_value);
    }
    void lockPowerConsumptionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockPowerConsumptionAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute gearSelection
    virtual const std::string &getGearSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireGearSelectionAttributeChanged(std::string _value) {
    auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireGearSelectionAttributeChanged(_value);
    }
    void lockGearSelectionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockGearSelectionAttribute(_lockAccess);
    }


    using CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ServiceManagerStubAdapter, ServiceManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ServiceManagerStubRemoteEvent RemoteEventType;
    typedef ServiceManager StubInterface;
};

} // namespace DES_Project3
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_DES_PROJECT3_Service_Manager_STUB_HPP_
