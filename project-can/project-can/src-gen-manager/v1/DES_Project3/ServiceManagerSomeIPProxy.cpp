/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/DES_Project3/ServiceManagerSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace DES_Project3 {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createServiceManagerSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< ServiceManagerSomeIPProxy>(_address, _connection);
}

void initializeServiceManagerSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:DES_Project3.ServiceManager:v1_0:ServiceManager",
        0x9999, 0x5618, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "DES_Project3.ServiceManager:v1_0",
        &createServiceManagerSomeIPProxy);
}

INITIALIZER(registerServiceManagerSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeServiceManagerSomeIPProxy);
}

ServiceManagerSomeIPProxy::ServiceManagerSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          speed_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xdb28), CommonAPI::SomeIP::event_id_t(0xdb28), CommonAPI::SomeIP::method_id_t(0x6101), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6102), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
          rpm_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xdb8c), CommonAPI::SomeIP::event_id_t(0xdb8c), CommonAPI::SomeIP::method_id_t(0x6201), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6202), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
          indicator_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xdbf0), CommonAPI::SomeIP::event_id_t(0xdbf0), CommonAPI::SomeIP::method_id_t(0x6301), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6302), true, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
          gear_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xdc54), CommonAPI::SomeIP::event_id_t(0xdc54), CommonAPI::SomeIP::method_id_t(0x6401), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6402), true, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
          battery_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xdcb8), CommonAPI::SomeIP::event_id_t(0xdcb8), CommonAPI::SomeIP::method_id_t(0x6501), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6502), true, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
          voltage_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xdd1c), CommonAPI::SomeIP::event_id_t(0xdd1c), CommonAPI::SomeIP::method_id_t(0x6601), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6602), true, static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
          current_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xdd80), CommonAPI::SomeIP::event_id_t(0xdd80), CommonAPI::SomeIP::method_id_t(0x6701), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6702), true, static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
          powerConsumption_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xdde4), CommonAPI::SomeIP::event_id_t(0xdde4), CommonAPI::SomeIP::method_id_t(0x6801), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6802), true, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
          gearSelection_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xde48), CommonAPI::SomeIP::event_id_t(0xde48), CommonAPI::SomeIP::method_id_t(0x6901), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x6902), true, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr))
{
}

ServiceManagerSomeIPProxy::~ServiceManagerSomeIPProxy() {
    completed_.set_value();
}

ServiceManagerSomeIPProxy::SpeedAttribute& ServiceManagerSomeIPProxy::getSpeedAttribute() {
    return speed_;
}
ServiceManagerSomeIPProxy::RpmAttribute& ServiceManagerSomeIPProxy::getRpmAttribute() {
    return rpm_;
}
ServiceManagerSomeIPProxy::IndicatorAttribute& ServiceManagerSomeIPProxy::getIndicatorAttribute() {
    return indicator_;
}
ServiceManagerSomeIPProxy::GearAttribute& ServiceManagerSomeIPProxy::getGearAttribute() {
    return gear_;
}
ServiceManagerSomeIPProxy::BatteryAttribute& ServiceManagerSomeIPProxy::getBatteryAttribute() {
    return battery_;
}
ServiceManagerSomeIPProxy::VoltageAttribute& ServiceManagerSomeIPProxy::getVoltageAttribute() {
    return voltage_;
}
ServiceManagerSomeIPProxy::CurrentAttribute& ServiceManagerSomeIPProxy::getCurrentAttribute() {
    return current_;
}
ServiceManagerSomeIPProxy::PowerConsumptionAttribute& ServiceManagerSomeIPProxy::getPowerConsumptionAttribute() {
    return powerConsumption_;
}
ServiceManagerSomeIPProxy::GearSelectionAttribute& ServiceManagerSomeIPProxy::getGearSelectionAttribute() {
    return gearSelection_;
}


void ServiceManagerSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> ServiceManagerSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace DES_Project3
} // namespace v1
