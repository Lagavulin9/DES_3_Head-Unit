/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_DES_PROJECT3_HU_STUB_DEFAULT_HPP_
#define V1_DES_PROJECT3_HU_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/DES_Project3/HUStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace DES_Project3 {

/**
 * Provides a default implementation for HUStubRemoteEvent and
 * HUStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT HUStubDefault
    : public virtual HUStub {
public:
    COMMONAPI_EXPORT HUStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(HU::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT HUStubRemoteEvent* initStubAdapter(const std::shared_ptr< HUStubAdapter> &_adapter) {
        CommonAPI::Stub<HUStubAdapter, HUStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual const std::string &getGearSelectionAttribute() {
        return gearSelectionAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const std::string &getGearSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getGearSelectionAttribute();
    }
    COMMONAPI_EXPORT virtual void setGearSelectionAttribute(std::string _value) {
        const bool valueChanged = trySetGearSelectionAttribute(std::move(_value));
        if (valueChanged) {
            fireGearSelectionAttributeChanged(gearSelectionAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setGearSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
        (void)_client;
        setGearSelectionAttribute(_value);
    }


protected:
    COMMONAPI_EXPORT virtual bool trySetGearSelectionAttribute(std::string _value) {
        if (!validateGearSelectionAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<HUStubAdapter> stubAdapter = CommonAPI::Stub<HUStubAdapter, HUStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockGearSelectionAttribute(true);
            valueChanged = (gearSelectionAttributeValue_ != _value);
            gearSelectionAttributeValue_ = std::move(_value);
            stubAdapter->lockGearSelectionAttribute(false);
        } else {
            valueChanged = (gearSelectionAttributeValue_ != _value);
            gearSelectionAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateGearSelectionAttributeRequestedValue(const std::string &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteGearSelectionAttributeChanged() {
        // No operation in default
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual HUStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(HUStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        COMMONAPI_EXPORT virtual void onRemoteGearSelectionAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteGearSelectionAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetGearSelectionAttribute(std::string _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetGearSelectionAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetGearSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
            (void)_client;
            return onRemoteSetGearSelectionAttribute(_value);
        }

    private:
        HUStubDefault *defaultStub_;
    };
protected:
    HUStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    std::string gearSelectionAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace DES_Project3
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_DES_PROJECT3_HU_STUB_DEFAULT
