/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_DES_PROJECT3_CAR__INFORMATION_SOMEIP_STUB_ADAPTER_HPP_
#define V1_DES_PROJECT3_CAR__INFORMATION_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/DES_Project3/Car_InformationStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace DES_Project3 {

template <typename _Stub = ::v1::DES_Project3::Car_InformationStub, typename... _Stubs>
class Car_InformationSomeIPStubAdapterInternal
    : public virtual Car_InformationStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> Car_InformationSomeIPStubAdapterHelper;

    ~Car_InformationSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        Car_InformationSomeIPStubAdapterHelper::deinit();
    }

    void fireBatteryAttributeChanged(const uint8_t &_value);
    
    void fireVoltageAttributeChanged(const float &_value);
    
    void fireCurrentAttributeChanged(const float &_value);
    
    void firePowerConsumptionAttributeChanged(const uint8_t &_value);
    
    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        CommonAPI::Version
    > getCar_InformationInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getBatteryAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setBatteryAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        float
    > getVoltageAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        float
    > setVoltageAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        float
    > getCurrentAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        float
    > setCurrentAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getPowerConsumptionAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::DES_Project3::Car_InformationStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setPowerConsumptionAttributeStubDispatcher;
    
    Car_InformationSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        Car_InformationSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< Car_InformationStub>(_stub)),
        getCar_InformationInterfaceVersionStubDispatcher(&Car_InformationStub::lockInterfaceVersionAttribute, &Car_InformationStub::getInterfaceVersion, false, true),
        getBatteryAttributeStubDispatcher(
            &::v1::DES_Project3::Car_InformationStub::lockBatteryAttribute,
            &::v1::DES_Project3::Car_InformationStub::getBatteryAttribute,
            false,
            _stub->hasElement(0)),
        setBatteryAttributeStubDispatcher(
            &::v1::DES_Project3::Car_InformationStub::lockBatteryAttribute,
            &::v1::DES_Project3::Car_InformationStub::getBatteryAttribute,
            &Car_InformationStubRemoteEvent::onRemoteSetBatteryAttribute,
            &Car_InformationStubRemoteEvent::onRemoteBatteryAttributeChanged,
            &Car_InformationStubAdapter::fireBatteryAttributeChanged,
            false,
            _stub->hasElement(0))
        ,
        getVoltageAttributeStubDispatcher(
            &::v1::DES_Project3::Car_InformationStub::lockVoltageAttribute,
            &::v1::DES_Project3::Car_InformationStub::getVoltageAttribute,
            false,
            _stub->hasElement(1)),
        setVoltageAttributeStubDispatcher(
            &::v1::DES_Project3::Car_InformationStub::lockVoltageAttribute,
            &::v1::DES_Project3::Car_InformationStub::getVoltageAttribute,
            &Car_InformationStubRemoteEvent::onRemoteSetVoltageAttribute,
            &Car_InformationStubRemoteEvent::onRemoteVoltageAttributeChanged,
            &Car_InformationStubAdapter::fireVoltageAttributeChanged,
            false,
            _stub->hasElement(1))
        ,
        getCurrentAttributeStubDispatcher(
            &::v1::DES_Project3::Car_InformationStub::lockCurrentAttribute,
            &::v1::DES_Project3::Car_InformationStub::getCurrentAttribute,
            false,
            _stub->hasElement(2)),
        setCurrentAttributeStubDispatcher(
            &::v1::DES_Project3::Car_InformationStub::lockCurrentAttribute,
            &::v1::DES_Project3::Car_InformationStub::getCurrentAttribute,
            &Car_InformationStubRemoteEvent::onRemoteSetCurrentAttribute,
            &Car_InformationStubRemoteEvent::onRemoteCurrentAttributeChanged,
            &Car_InformationStubAdapter::fireCurrentAttributeChanged,
            false,
            _stub->hasElement(2))
        ,
        getPowerConsumptionAttributeStubDispatcher(
            &::v1::DES_Project3::Car_InformationStub::lockPowerConsumptionAttribute,
            &::v1::DES_Project3::Car_InformationStub::getPowerConsumptionAttribute,
            false,
            _stub->hasElement(3)),
        setPowerConsumptionAttributeStubDispatcher(
            &::v1::DES_Project3::Car_InformationStub::lockPowerConsumptionAttribute,
            &::v1::DES_Project3::Car_InformationStub::getPowerConsumptionAttribute,
            &Car_InformationStubRemoteEvent::onRemoteSetPowerConsumptionAttribute,
            &Car_InformationStubRemoteEvent::onRemotePowerConsumptionAttributeChanged,
            &Car_InformationStubAdapter::firePowerConsumptionAttributeChanged,
            false,
            _stub->hasElement(3))
    {
        Car_InformationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5101) }, &getBatteryAttributeStubDispatcher );
        Car_InformationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5102) }, &setBatteryAttributeStubDispatcher );
        Car_InformationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5201) }, &getVoltageAttributeStubDispatcher );
        Car_InformationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5202) }, &setVoltageAttributeStubDispatcher );
        Car_InformationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5301) }, &getCurrentAttributeStubDispatcher );
        Car_InformationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5302) }, &setCurrentAttributeStubDispatcher );
        Car_InformationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5401) }, &getPowerConsumptionAttributeStubDispatcher );
        Car_InformationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5402) }, &setPowerConsumptionAttributeStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF, 0xFFFFFFFF, 0xFFFFFFFF);

        // Provided events/fields
        if (_stub->hasElement(0)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xd740)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xd740), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireBatteryAttributeChanged(std::dynamic_pointer_cast< ::v1::DES_Project3::Car_InformationStub>(_stub)->getBatteryAttribute(itsClient));
        }

        if (_stub->hasElement(1)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xd7a4)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xd7a4), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireVoltageAttributeChanged(std::dynamic_pointer_cast< ::v1::DES_Project3::Car_InformationStub>(_stub)->getVoltageAttribute(itsClient));
        }

        if (_stub->hasElement(2)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xd808)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xd808), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireCurrentAttributeChanged(std::dynamic_pointer_cast< ::v1::DES_Project3::Car_InformationStub>(_stub)->getCurrentAttribute(itsClient));
        }

        if (_stub->hasElement(3)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xd86c)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xd86c), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            firePowerConsumptionAttributeChanged(std::dynamic_pointer_cast< ::v1::DES_Project3::Car_InformationStub>(_stub)->getPowerConsumptionAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireBatteryAttributeChanged(const uint8_t &_value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xd740),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireVoltageAttributeChanged(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            float
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xd7a4),
        false,
        _value
    );
}

template <typename _Stub, typename... _Stubs>
void Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireCurrentAttributeChanged(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            float
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xd808),
        false,
        _value
    );
}

template <typename _Stub, typename... _Stubs>
void Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::firePowerConsumptionAttributeChanged(const uint8_t &_value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xd86c),
        false,
        deployedValue
    );
}


template <typename _Stub, typename... _Stubs>
void Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v1::DES_Project3::Car_InformationStub, typename... _Stubs>
class Car_InformationSomeIPStubAdapter
    : public Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    Car_InformationSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          Car_InformationSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace DES_Project3
} // namespace v1

#endif // V1_DES_PROJECT3_Car__Information_SOMEIP_STUB_ADAPTER_HPP_
