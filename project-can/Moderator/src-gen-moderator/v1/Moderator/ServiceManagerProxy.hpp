/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_MODERATOR_Service_Manager_PROXY_HPP_
#define V1_MODERATOR_Service_Manager_PROXY_HPP_

#include <v1/Moderator/ServiceManagerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace Moderator {

template <typename ... _AttributeExtensions>
class ServiceManagerProxy
    : virtual public ServiceManager,
      virtual public ServiceManagerProxyBase,
      virtual public _AttributeExtensions... {
public:
    ServiceManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ServiceManagerProxy();

    typedef ServiceManager InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Returns the wrapper class that provides access to the attribute speed.
     */
    virtual SpeedAttribute& getSpeedAttribute() {
        return delegate_->getSpeedAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute rpm.
     */
    virtual RpmAttribute& getRpmAttribute() {
        return delegate_->getRpmAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute indicator.
     */
    virtual IndicatorAttribute& getIndicatorAttribute() {
        return delegate_->getIndicatorAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute gear.
     */
    virtual GearAttribute& getGearAttribute() {
        return delegate_->getGearAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute battery.
     */
    virtual BatteryAttribute& getBatteryAttribute() {
        return delegate_->getBatteryAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute voltage.
     */
    virtual VoltageAttribute& getVoltageAttribute() {
        return delegate_->getVoltageAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute current.
     */
    virtual CurrentAttribute& getCurrentAttribute() {
        return delegate_->getCurrentAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute powerConsumption.
     */
    virtual PowerConsumptionAttribute& getPowerConsumptionAttribute() {
        return delegate_->getPowerConsumptionAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute gearSelection.
     */
    virtual GearSelectionAttribute& getGearSelectionAttribute() {
        return delegate_->getGearSelectionAttribute();
    }



 private:
    std::shared_ptr< ServiceManagerProxyBase> delegate_;
};

typedef ServiceManagerProxy<> ServiceManagerProxyDefault;

namespace ServiceManagerExtensions {
    template <template <typename > class _ExtensionType>
    class SpeedAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::SpeedAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::SpeedAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        SpeedAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getSpeedAttribute()) {
        }
    
        inline extension_type& getSpeedAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class RpmAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::RpmAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::RpmAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        RpmAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getRpmAttribute()) {
        }
    
        inline extension_type& getRpmAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class IndicatorAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::IndicatorAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::IndicatorAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        IndicatorAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getIndicatorAttribute()) {
        }
    
        inline extension_type& getIndicatorAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class GearAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::GearAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::GearAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        GearAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getGearAttribute()) {
        }
    
        inline extension_type& getGearAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class BatteryAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::BatteryAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::BatteryAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        BatteryAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getBatteryAttribute()) {
        }
    
        inline extension_type& getBatteryAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VoltageAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::VoltageAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::VoltageAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        VoltageAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getVoltageAttribute()) {
        }
    
        inline extension_type& getVoltageAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CurrentAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::CurrentAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::CurrentAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CurrentAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getCurrentAttribute()) {
        }
    
        inline extension_type& getCurrentAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PowerConsumptionAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::PowerConsumptionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::PowerConsumptionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        PowerConsumptionAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getPowerConsumptionAttribute()) {
        }
    
        inline extension_type& getPowerConsumptionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class GearSelectionAttributeExtension {
     public:
        typedef _ExtensionType< ServiceManagerProxyBase::GearSelectionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ServiceManagerProxyBase::GearSelectionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        GearSelectionAttributeExtension(ServiceManagerProxyBase& proxy): attributeExtension_(proxy.getGearSelectionAttribute()) {
        }
    
        inline extension_type& getGearSelectionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace ServiceManagerExtensions

//
// ServiceManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
ServiceManagerProxy<_AttributeExtensions...>::ServiceManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< ServiceManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< ServiceManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ServiceManagerProxy<_AttributeExtensions...>::~ServiceManagerProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &ServiceManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ServiceManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ServiceManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ServiceManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ServiceManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> ServiceManagerProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace Moderator
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::Moderator::ServiceManagerProxy,
    _AttributeExtension> {
    typedef typename ::v1::Moderator::ServiceManagerProxy<
            ::v1::Moderator::ServiceManagerExtensions::SpeedAttributeExtension<_AttributeExtension>, 
            ::v1::Moderator::ServiceManagerExtensions::RpmAttributeExtension<_AttributeExtension>, 
            ::v1::Moderator::ServiceManagerExtensions::IndicatorAttributeExtension<_AttributeExtension>, 
            ::v1::Moderator::ServiceManagerExtensions::GearAttributeExtension<_AttributeExtension>, 
            ::v1::Moderator::ServiceManagerExtensions::BatteryAttributeExtension<_AttributeExtension>, 
            ::v1::Moderator::ServiceManagerExtensions::VoltageAttributeExtension<_AttributeExtension>, 
            ::v1::Moderator::ServiceManagerExtensions::CurrentAttributeExtension<_AttributeExtension>, 
            ::v1::Moderator::ServiceManagerExtensions::PowerConsumptionAttributeExtension<_AttributeExtension>, 
            ::v1::Moderator::ServiceManagerExtensions::GearSelectionAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_MODERATOR_Service_Manager_PROXY_HPP_
