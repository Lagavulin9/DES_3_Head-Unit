/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_MODERATOR_SERVICE_MANAGER_SOMEIP_STUB_ADAPTER_HPP_
#define V1_MODERATOR_SERVICE_MANAGER_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/Moderator/ServiceManagerStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace Moderator {

template <typename _Stub = ::v1::Moderator::ServiceManagerStub, typename... _Stubs>
class ServiceManagerSomeIPStubAdapterInternal
    : public virtual ServiceManagerStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> ServiceManagerSomeIPStubAdapterHelper;

    ~ServiceManagerSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        ServiceManagerSomeIPStubAdapterHelper::deinit();
    }

    void fireSpeedAttributeChanged(const uint32_t &_value);
    
    void fireRpmAttributeChanged(const uint32_t &_value);
    
    void fireIndicatorAttributeChanged(const std::string &_value);
    
    void fireGearAttributeChanged(const std::string &_value);
    
    void fireBatteryAttributeChanged(const uint8_t &_value);
    
    void fireVoltageAttributeChanged(const float &_value);
    
    void fireCurrentAttributeChanged(const float &_value);
    
    void firePowerConsumptionAttributeChanged(const uint8_t &_value);
    
    void fireGearSelectionAttributeChanged(const std::string &_value);
    
    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        CommonAPI::Version
    > getServiceManagerInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        uint32_t,
        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
    > getSpeedAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        uint32_t,
        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
    > setSpeedAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        uint32_t,
        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
    > getRpmAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        uint32_t,
        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
    > setRpmAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > getIndicatorAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > setIndicatorAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > getGearAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > setGearAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getBatteryAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setBatteryAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        float
    > getVoltageAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        float
    > setVoltageAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        float
    > getCurrentAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        float
    > setCurrentAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getPowerConsumptionAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setPowerConsumptionAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > getGearSelectionAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::Moderator::ServiceManagerStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > setGearSelectionAttributeStubDispatcher;
    
    ServiceManagerSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        ServiceManagerSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< ServiceManagerStub>(_stub)),
        getServiceManagerInterfaceVersionStubDispatcher(&ServiceManagerStub::lockInterfaceVersionAttribute, &ServiceManagerStub::getInterfaceVersion, false, true),
        getSpeedAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockSpeedAttribute,
            &::v1::Moderator::ServiceManagerStub::getSpeedAttribute,
            false,
            _stub->hasElement(0)),
        setSpeedAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockSpeedAttribute,
            &::v1::Moderator::ServiceManagerStub::getSpeedAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetSpeedAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSpeedAttributeChanged,
            &ServiceManagerStubAdapter::fireSpeedAttributeChanged,
            false,
            _stub->hasElement(0))
        ,
        getRpmAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockRpmAttribute,
            &::v1::Moderator::ServiceManagerStub::getRpmAttribute,
            false,
            _stub->hasElement(1)),
        setRpmAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockRpmAttribute,
            &::v1::Moderator::ServiceManagerStub::getRpmAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetRpmAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteRpmAttributeChanged,
            &ServiceManagerStubAdapter::fireRpmAttributeChanged,
            false,
            _stub->hasElement(1))
        ,
        getIndicatorAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockIndicatorAttribute,
            &::v1::Moderator::ServiceManagerStub::getIndicatorAttribute,
            false,
            _stub->hasElement(2)),
        setIndicatorAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockIndicatorAttribute,
            &::v1::Moderator::ServiceManagerStub::getIndicatorAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetIndicatorAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteIndicatorAttributeChanged,
            &ServiceManagerStubAdapter::fireIndicatorAttributeChanged,
            false,
            _stub->hasElement(2))
        ,
        getGearAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockGearAttribute,
            &::v1::Moderator::ServiceManagerStub::getGearAttribute,
            false,
            _stub->hasElement(3)),
        setGearAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockGearAttribute,
            &::v1::Moderator::ServiceManagerStub::getGearAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetGearAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteGearAttributeChanged,
            &ServiceManagerStubAdapter::fireGearAttributeChanged,
            false,
            _stub->hasElement(3))
        ,
        getBatteryAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockBatteryAttribute,
            &::v1::Moderator::ServiceManagerStub::getBatteryAttribute,
            false,
            _stub->hasElement(4)),
        setBatteryAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockBatteryAttribute,
            &::v1::Moderator::ServiceManagerStub::getBatteryAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetBatteryAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteBatteryAttributeChanged,
            &ServiceManagerStubAdapter::fireBatteryAttributeChanged,
            false,
            _stub->hasElement(4))
        ,
        getVoltageAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockVoltageAttribute,
            &::v1::Moderator::ServiceManagerStub::getVoltageAttribute,
            false,
            _stub->hasElement(5)),
        setVoltageAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockVoltageAttribute,
            &::v1::Moderator::ServiceManagerStub::getVoltageAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetVoltageAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteVoltageAttributeChanged,
            &ServiceManagerStubAdapter::fireVoltageAttributeChanged,
            false,
            _stub->hasElement(5))
        ,
        getCurrentAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockCurrentAttribute,
            &::v1::Moderator::ServiceManagerStub::getCurrentAttribute,
            false,
            _stub->hasElement(6)),
        setCurrentAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockCurrentAttribute,
            &::v1::Moderator::ServiceManagerStub::getCurrentAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetCurrentAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteCurrentAttributeChanged,
            &ServiceManagerStubAdapter::fireCurrentAttributeChanged,
            false,
            _stub->hasElement(6))
        ,
        getPowerConsumptionAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockPowerConsumptionAttribute,
            &::v1::Moderator::ServiceManagerStub::getPowerConsumptionAttribute,
            false,
            _stub->hasElement(7)),
        setPowerConsumptionAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockPowerConsumptionAttribute,
            &::v1::Moderator::ServiceManagerStub::getPowerConsumptionAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetPowerConsumptionAttribute,
            &ServiceManagerStubRemoteEvent::onRemotePowerConsumptionAttributeChanged,
            &ServiceManagerStubAdapter::firePowerConsumptionAttributeChanged,
            false,
            _stub->hasElement(7))
        ,
        getGearSelectionAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockGearSelectionAttribute,
            &::v1::Moderator::ServiceManagerStub::getGearSelectionAttribute,
            false,
            _stub->hasElement(8)),
        setGearSelectionAttributeStubDispatcher(
            &::v1::Moderator::ServiceManagerStub::lockGearSelectionAttribute,
            &::v1::Moderator::ServiceManagerStub::getGearSelectionAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteSetGearSelectionAttribute,
            &ServiceManagerStubRemoteEvent::onRemoteGearSelectionAttributeChanged,
            &ServiceManagerStubAdapter::fireGearSelectionAttributeChanged,
            false,
            _stub->hasElement(8))
    {
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6101) }, &getSpeedAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6102) }, &setSpeedAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6201) }, &getRpmAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6202) }, &setRpmAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6301) }, &getIndicatorAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6302) }, &setIndicatorAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6401) }, &getGearAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6402) }, &setGearAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6501) }, &getBatteryAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6502) }, &setBatteryAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6601) }, &getVoltageAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6602) }, &setVoltageAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6701) }, &getCurrentAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6702) }, &setCurrentAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6801) }, &getPowerConsumptionAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6802) }, &setPowerConsumptionAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6901) }, &getGearSelectionAttributeStubDispatcher );
        ServiceManagerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6902) }, &setGearSelectionAttributeStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF, 0xFFFFFFFF, 0xFFFFFFFF);

        // Provided events/fields
        if (_stub->hasElement(0)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xdb28)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xdb28), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireSpeedAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getSpeedAttribute(itsClient));
        }

        if (_stub->hasElement(1)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xdb8c)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xdb8c), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireRpmAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getRpmAttribute(itsClient));
        }

        if (_stub->hasElement(2)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xdbf0)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xdbf0), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireIndicatorAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getIndicatorAttribute(itsClient));
        }

        if (_stub->hasElement(3)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xdc54)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xdc54), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireGearAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getGearAttribute(itsClient));
        }

        if (_stub->hasElement(4)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xdcb8)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xdcb8), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireBatteryAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getBatteryAttribute(itsClient));
        }

        if (_stub->hasElement(5)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xdd1c)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xdd1c), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireVoltageAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getVoltageAttribute(itsClient));
        }

        if (_stub->hasElement(6)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xdd80)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xdd80), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireCurrentAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getCurrentAttribute(itsClient));
        }

        if (_stub->hasElement(7)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xdde4)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xdde4), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            firePowerConsumptionAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getPowerConsumptionAttribute(itsClient));
        }

        if (_stub->hasElement(8)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xde48)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xde48), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireGearSelectionAttributeChanged(std::dynamic_pointer_cast< ::v1::Moderator::ServiceManagerStub>(_stub)->getGearSelectionAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSpeedAttributeChanged(const uint32_t &_value) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xdb28),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRpmAttributeChanged(const uint32_t &_value) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xdb8c),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireIndicatorAttributeChanged(const std::string &_value) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xdbf0),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGearAttributeChanged(const std::string &_value) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xdc54),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireBatteryAttributeChanged(const uint8_t &_value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xdcb8),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireVoltageAttributeChanged(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            float
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xdd1c),
        false,
        _value
    );
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireCurrentAttributeChanged(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            float
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xdd80),
        false,
        _value
    );
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::firePowerConsumptionAttributeChanged(const uint8_t &_value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xdde4),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGearSelectionAttributeChanged(const std::string &_value) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xde48),
        false,
        deployedValue
    );
}


template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v1::Moderator::ServiceManagerStub, typename... _Stubs>
class ServiceManagerSomeIPStubAdapter
    : public ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    ServiceManagerSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          ServiceManagerSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace Moderator
} // namespace v1

#endif // V1_MODERATOR_Service_Manager_SOMEIP_STUB_ADAPTER_HPP_
